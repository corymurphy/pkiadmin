// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repo

import (
	"context"
	"database/sql"
)

const certificateRequestsAndHashAlgorithm = `-- name: CertificateRequestsAndHashAlgorithm :many
SELECT r.id AS id,
      r.display_name AS display_name,
      r.key_length AS key_length,
      r.requested_on AS requested_on,
      h.name AS hash_algorithm,
      c.name AS cipher_algorithm,
      s.name AS signing_request_api,
      capi.name as certificate_cryptographic_api
FROM certificate_requests r
INNER JOIN hash_algorithm h ON r.hash_algorithm_id = h.id
INNER JOIN cipher_algorithm c ON r.cipher_algorithm_id = c.id
INNER JOIN signing_request_api s ON r.signing_request_api_id = s.id
INNER JOIN certificate_cryptographic_api capi ON r.certificate_cryptographic_api_id = capi.id
ORDER BY r.id
`

type CertificateRequestsAndHashAlgorithmRow struct {
	ID                          int64
	DisplayName                 sql.NullString
	KeyLength                   sql.NullInt64
	RequestedOn                 sql.NullTime
	HashAlgorithm               sql.NullString
	CipherAlgorithm             sql.NullString
	SigningRequestApi           sql.NullString
	CertificateCryptographicApi sql.NullString
}

func (q *Queries) CertificateRequestsAndHashAlgorithm(ctx context.Context) ([]CertificateRequestsAndHashAlgorithmRow, error) {
	rows, err := q.db.QueryContext(ctx, certificateRequestsAndHashAlgorithm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CertificateRequestsAndHashAlgorithmRow
	for rows.Next() {
		var i CertificateRequestsAndHashAlgorithmRow
		if err := rows.Scan(
			&i.ID,
			&i.DisplayName,
			&i.KeyLength,
			&i.RequestedOn,
			&i.HashAlgorithm,
			&i.CipherAlgorithm,
			&i.SigningRequestApi,
			&i.CertificateCryptographicApi,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createCertCryptoApi = `-- name: CreateCertCryptoApi :one
INSERT INTO certificate_cryptographic_api (
  name, shortname
) VALUES (
  ?, ?
)
RETURNING id, name, shortname
`

type CreateCertCryptoApiParams struct {
	Name      sql.NullString
	Shortname sql.NullString
}

func (q *Queries) CreateCertCryptoApi(ctx context.Context, arg CreateCertCryptoApiParams) (CertificateCryptographicApi, error) {
	row := q.db.QueryRowContext(ctx, createCertCryptoApi, arg.Name, arg.Shortname)
	var i CertificateCryptographicApi
	err := row.Scan(&i.ID, &i.Name, &i.Shortname)
	return i, err
}

const createCertificateRequest = `-- name: CreateCertificateRequest :one
INSERT INTO certificate_requests (
      display_name,
      signing_algorithm,
      key_length,
      requested_on,
      certificate_cryptographic_api_id,
      signing_request_api_id,
      cipher_algorithm_id,
      hash_algorithm_id
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING id
`

type CreateCertificateRequestParams struct {
	DisplayName                   sql.NullString
	SigningAlgorithm              sql.NullString
	KeyLength                     sql.NullInt64
	RequestedOn                   sql.NullTime
	CertificateCryptographicApiID sql.NullInt64
	SigningRequestApiID           sql.NullInt64
	CipherAlgorithmID             sql.NullInt64
	HashAlgorithmID               sql.NullInt64
}

func (q *Queries) CreateCertificateRequest(ctx context.Context, arg CreateCertificateRequestParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createCertificateRequest,
		arg.DisplayName,
		arg.SigningAlgorithm,
		arg.KeyLength,
		arg.RequestedOn,
		arg.CertificateCryptographicApiID,
		arg.SigningRequestApiID,
		arg.CipherAlgorithmID,
		arg.HashAlgorithmID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createCipherAlgorithm = `-- name: CreateCipherAlgorithm :one
INSERT INTO cipher_algorithm (
  name, keysize
) VALUES (
  ?, ?
)
RETURNING id, name
`

type CreateCipherAlgorithmParams struct {
	Name    sql.NullString
	Keysize sql.NullInt64
}

type CreateCipherAlgorithmRow struct {
	ID   int64
	Name sql.NullString
}

func (q *Queries) CreateCipherAlgorithm(ctx context.Context, arg CreateCipherAlgorithmParams) (CreateCipherAlgorithmRow, error) {
	row := q.db.QueryRowContext(ctx, createCipherAlgorithm, arg.Name, arg.Keysize)
	var i CreateCipherAlgorithmRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createHashAlgorithm = `-- name: CreateHashAlgorithm :one
INSERT INTO hash_algorithm (
  name
) VALUES (
  ?
)
RETURNING id, name
`

func (q *Queries) CreateHashAlgorithm(ctx context.Context, name sql.NullString) (HashAlgorithm, error) {
	row := q.db.QueryRowContext(ctx, createHashAlgorithm, name)
	var i HashAlgorithm
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createSigningRequestApi = `-- name: CreateSigningRequestApi :one
INSERT INTO signing_request_api (
  name
) VALUES (
  ?
)
RETURNING id, name
`

func (q *Queries) CreateSigningRequestApi(ctx context.Context, name sql.NullString) (SigningRequestApi, error) {
	row := q.db.QueryRowContext(ctx, createSigningRequestApi, name)
	var i SigningRequestApi
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteCertCryptoApi = `-- name: DeleteCertCryptoApi :exec
DELETE FROM certificate_cryptographic_api
WHERE id = ?
`

func (q *Queries) DeleteCertCryptoApi(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCertCryptoApi, id)
	return err
}

const deleteCertificateRequest = `-- name: DeleteCertificateRequest :exec
DELETE FROM certificate_requests
WHERE id = ?
`

func (q *Queries) DeleteCertificateRequest(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCertificateRequest, id)
	return err
}

const deleteCipherAlgorithm = `-- name: DeleteCipherAlgorithm :exec
DELETE FROM cipher_algorithm
WHERE id = ?
`

func (q *Queries) DeleteCipherAlgorithm(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCipherAlgorithm, id)
	return err
}

const deleteHashAlgorithm = `-- name: DeleteHashAlgorithm :exec
DELETE FROM hash_algorithm
WHERE id = ?
`

func (q *Queries) DeleteHashAlgorithm(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteHashAlgorithm, id)
	return err
}

const deleteSigningRequestApi = `-- name: DeleteSigningRequestApi :exec
DELETE FROM signing_request_api
WHERE id = ?
`

func (q *Queries) DeleteSigningRequestApi(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSigningRequestApi, id)
	return err
}

const getCertCryptoApi = `-- name: GetCertCryptoApi :one

SELECT id, name, shortname FROM certificate_cryptographic_api
WHERE id = ? LIMIT 1
`

//------------------------------------------
// certificate_cryptographic_api
//------------------------------------------
func (q *Queries) GetCertCryptoApi(ctx context.Context, id int64) (CertificateCryptographicApi, error) {
	row := q.db.QueryRowContext(ctx, getCertCryptoApi, id)
	var i CertificateCryptographicApi
	err := row.Scan(&i.ID, &i.Name, &i.Shortname)
	return i, err
}

const getCertificateRequest = `-- name: GetCertificateRequest :one

SELECT id,
      display_name,
      signing_algorithm,
      key_length,
      requested_on,
      certificate_cryptographic_api_id,
      signing_request_api_id,
      cipher_algorithm_id,
      hash_algorithm_id
FROM certificate_requests
WHERE id = ? LIMIT 1
`

//------------------------------------------
// certificate_requests
//------------------------------------------
func (q *Queries) GetCertificateRequest(ctx context.Context, id int64) (CertificateRequest, error) {
	row := q.db.QueryRowContext(ctx, getCertificateRequest, id)
	var i CertificateRequest
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.SigningAlgorithm,
		&i.KeyLength,
		&i.RequestedOn,
		&i.CertificateCryptographicApiID,
		&i.SigningRequestApiID,
		&i.CipherAlgorithmID,
		&i.HashAlgorithmID,
	)
	return i, err
}

const getCertificateRequestDetailed = `-- name: GetCertificateRequestDetailed :one
SELECT r.id AS id,
      r.display_name AS display_name,
      r.key_length AS key_length,
      r.requested_on AS requested_on,
      h.name AS hash_algorithm,
      c.name AS cipher_algorithm,
      s.name AS signing_request_api,
      capi.name as certificate_cryptographic_api
FROM certificate_requests r
INNER JOIN hash_algorithm h ON r.hash_algorithm_id = h.id
INNER JOIN cipher_algorithm c ON r.cipher_algorithm_id = c.id
INNER JOIN signing_request_api s ON r.signing_request_api_id = s.id
INNER JOIN certificate_cryptographic_api capi ON r.certificate_cryptographic_api_id = capi.id
WHERE r.id = ? LIMIT 1
`

type GetCertificateRequestDetailedRow struct {
	ID                          int64
	DisplayName                 sql.NullString
	KeyLength                   sql.NullInt64
	RequestedOn                 sql.NullTime
	HashAlgorithm               sql.NullString
	CipherAlgorithm             sql.NullString
	SigningRequestApi           sql.NullString
	CertificateCryptographicApi sql.NullString
}

func (q *Queries) GetCertificateRequestDetailed(ctx context.Context, id int64) (GetCertificateRequestDetailedRow, error) {
	row := q.db.QueryRowContext(ctx, getCertificateRequestDetailed, id)
	var i GetCertificateRequestDetailedRow
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.KeyLength,
		&i.RequestedOn,
		&i.HashAlgorithm,
		&i.CipherAlgorithm,
		&i.SigningRequestApi,
		&i.CertificateCryptographicApi,
	)
	return i, err
}

const getCipherAlgorithm = `-- name: GetCipherAlgorithm :one

SELECT id, name, keysize FROM cipher_algorithm
WHERE id = ? LIMIT 1
`

type GetCipherAlgorithmRow struct {
	ID      int64
	Name    sql.NullString
	Keysize sql.NullInt64
}

//------------------------------------------
// cipher_algorithm
//------------------------------------------
func (q *Queries) GetCipherAlgorithm(ctx context.Context, id int64) (GetCipherAlgorithmRow, error) {
	row := q.db.QueryRowContext(ctx, getCipherAlgorithm, id)
	var i GetCipherAlgorithmRow
	err := row.Scan(&i.ID, &i.Name, &i.Keysize)
	return i, err
}

const getHashAlgorithm = `-- name: GetHashAlgorithm :one

SELECT id, name FROM hash_algorithm
WHERE id = ? LIMIT 1
`

//------------------------------------------
// hash_algorithm
//------------------------------------------
func (q *Queries) GetHashAlgorithm(ctx context.Context, id int64) (HashAlgorithm, error) {
	row := q.db.QueryRowContext(ctx, getHashAlgorithm, id)
	var i HashAlgorithm
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getSigningRequestApi = `-- name: GetSigningRequestApi :one

SELECT id, name FROM signing_request_api
WHERE id = ? LIMIT 1
`

//------------------------------------------
// signing_request_api
//------------------------------------------
func (q *Queries) GetSigningRequestApi(ctx context.Context, id int64) (SigningRequestApi, error) {
	row := q.db.QueryRowContext(ctx, getSigningRequestApi, id)
	var i SigningRequestApi
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listCertCryptoApi = `-- name: ListCertCryptoApi :many
SELECT id, name, shortname FROM certificate_cryptographic_api
ORDER BY id
`

func (q *Queries) ListCertCryptoApi(ctx context.Context) ([]CertificateCryptographicApi, error) {
	rows, err := q.db.QueryContext(ctx, listCertCryptoApi)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CertificateCryptographicApi
	for rows.Next() {
		var i CertificateCryptographicApi
		if err := rows.Scan(&i.ID, &i.Name, &i.Shortname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCertificateRequest = `-- name: ListCertificateRequest :many
SELECT id,
      display_name,
      signing_algorithm,
      key_length,
      requested_on,
      certificate_cryptographic_api_id,
      signing_request_api_id,
      cipher_algorithm_id,
      hash_algorithm_id
FROM certificate_requests
ORDER BY id
`

func (q *Queries) ListCertificateRequest(ctx context.Context) ([]CertificateRequest, error) {
	rows, err := q.db.QueryContext(ctx, listCertificateRequest)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CertificateRequest
	for rows.Next() {
		var i CertificateRequest
		if err := rows.Scan(
			&i.ID,
			&i.DisplayName,
			&i.SigningAlgorithm,
			&i.KeyLength,
			&i.RequestedOn,
			&i.CertificateCryptographicApiID,
			&i.SigningRequestApiID,
			&i.CipherAlgorithmID,
			&i.HashAlgorithmID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCipherAlgorithm = `-- name: ListCipherAlgorithm :many
SELECT id, name, keysize FROM cipher_algorithm
ORDER BY id
`

type ListCipherAlgorithmRow struct {
	ID      int64
	Name    sql.NullString
	Keysize sql.NullInt64
}

func (q *Queries) ListCipherAlgorithm(ctx context.Context) ([]ListCipherAlgorithmRow, error) {
	rows, err := q.db.QueryContext(ctx, listCipherAlgorithm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCipherAlgorithmRow
	for rows.Next() {
		var i ListCipherAlgorithmRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Keysize); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHashAlgorithm = `-- name: ListHashAlgorithm :many
SELECT id, name FROM hash_algorithm
ORDER BY id
`

func (q *Queries) ListHashAlgorithm(ctx context.Context) ([]HashAlgorithm, error) {
	rows, err := q.db.QueryContext(ctx, listHashAlgorithm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HashAlgorithm
	for rows.Next() {
		var i HashAlgorithm
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSigningRequestApi = `-- name: ListSigningRequestApi :many
SELECT id, name FROM signing_request_api
ORDER BY id
`

func (q *Queries) ListSigningRequestApi(ctx context.Context) ([]SigningRequestApi, error) {
	rows, err := q.db.QueryContext(ctx, listSigningRequestApi)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SigningRequestApi
	for rows.Next() {
		var i SigningRequestApi
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCertCryptoApi = `-- name: UpdateCertCryptoApi :exec
UPDATE certificate_cryptographic_api
set name = ?,
shortname = ?
WHERE id = ?
RETURNING id, name, shortname
`

type UpdateCertCryptoApiParams struct {
	Name      sql.NullString
	Shortname sql.NullString
	ID        int64
}

func (q *Queries) UpdateCertCryptoApi(ctx context.Context, arg UpdateCertCryptoApiParams) error {
	_, err := q.db.ExecContext(ctx, updateCertCryptoApi, arg.Name, arg.Shortname, arg.ID)
	return err
}

const updateCipherAlgorithm = `-- name: UpdateCipherAlgorithm :exec
UPDATE cipher_algorithm
set name = ?, keysize = ?
WHERE id = ?
RETURNING id, name, keysize
`

type UpdateCipherAlgorithmParams struct {
	Name    sql.NullString
	Keysize sql.NullInt64
	ID      int64
}

func (q *Queries) UpdateCipherAlgorithm(ctx context.Context, arg UpdateCipherAlgorithmParams) error {
	_, err := q.db.ExecContext(ctx, updateCipherAlgorithm, arg.Name, arg.Keysize, arg.ID)
	return err
}

const updateHashAlgorithm = `-- name: UpdateHashAlgorithm :exec
UPDATE hash_algorithm
set name = ?
WHERE id = ?
RETURNING id
`

type UpdateHashAlgorithmParams struct {
	Name sql.NullString
	ID   int64
}

func (q *Queries) UpdateHashAlgorithm(ctx context.Context, arg UpdateHashAlgorithmParams) error {
	_, err := q.db.ExecContext(ctx, updateHashAlgorithm, arg.Name, arg.ID)
	return err
}

const updateSigningRequestApi = `-- name: UpdateSigningRequestApi :exec
UPDATE signing_request_api
set name = ?
WHERE id = ?
RETURNING id, name
`

type UpdateSigningRequestApiParams struct {
	Name sql.NullString
	ID   int64
}

func (q *Queries) UpdateSigningRequestApi(ctx context.Context, arg UpdateSigningRequestApiParams) error {
	_, err := q.db.ExecContext(ctx, updateSigningRequestApi, arg.Name, arg.ID)
	return err
}
